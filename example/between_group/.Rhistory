ncol(myData)
myData <- data.frame()
ncol(myData)
nrow(myData)
typeof(myData)
myData <- data.frame(a=1:2,b=c('a','b'))
is.matrix(mydata)
is.matrix(myData)
as.matrix(myData)
q()
x <- 10
f1 <- function(x){
function()
{x + 10}
}
f1(1)()
f2 <- function(a,b){a*10}
f2(10,stop("This is an error!"))
help(nnet)
help(mget)
f <- function() 2
is.function(f)
is.primitive(f)
is.primitive(sum)
search()
help("Filter")
f <- function(){
x < 1
x <- 1
y <- 2
c(1,2)
}
f()
f <- function(){
x <- 1
y <- 2
c(x,y)
}
f()
rm(f)
ls()
x <- 2
g <- function(){
y <- 1
c(x,y)
}
g()
rm(x,g)
q()
j <- function(){
if (!exists("a")) {
a <- 1
}else {
a <- a + 1
}
print(a)
}
j()
j()
j()
q()
c <- 10
c(c = c)
c(10)
c
c(a = 10)
f <- function(x){
f <- function(x){
f <- function(x){
x^2
}
f(x) + 1
}
f(x)*2
}
f(10)
q()
help('sapply')
AA <- 1:10
is.list(AA)
str(AA)
lapply(1:0, function(x) x + 1)
lapply(1:10, function(x) x + 1)
add <- function(x){
function(y) x + y
}
adders <- lapply(1:10, add)
adders[[1]](10)
adders
adders[[10]](10)
q()
f <- function(x = {y <- 1:2}, y = 0){x + y}
f
f()
f <- function(x = {y <- 1:2}, y = 0){ y x + y}
f <- function(x = {y <- 1:2}, y = 0){ y;x + y}
f()
f2 <- function(x=z){z <- 100;x}
f2()
library(xlsx)
install.packages('xlsx')
library(xlsx)
install.packages('rJava')
library(xlsx)
q()
library(xlsx)
help(lapply)
library(xlsx)
help("read.xlsx2")
help(lapply)
help("read.xlsx2")
help(lapply)
library(dplyr)
help("summarise")
help("group_by")
help(mean)
help(get)
help("with")
help("summarise")
help(do)
by_cyl <- group_by(mtcars, cyl)
do(by_cyl, head(., 2))
head(by_cyl)
by_cyl
str(by_cyl)
help("write.xlsx")
help("read.table")
help(rev)
help(replicate)
help(sample)
AA <- data.frame(a = c(1:4))
AA
AA[]
b <- AA[]
str(b)
str(AA)
q()
library(xlsx)
help("read.xlsx")
library(dpyr)
library(dplyr)
help("summarise")
help("select")
help(mean)
help("range")
help(formula)
help(lm)
help(vapply)
help("trunc")
ceiling(3.2)
ceiling(sample(seq(1,3, length = 20), 10))
signif(sample(seq(1,3, length = 20), 10))
trunc(sample(seq(1,3, length = 20), 10))
floor(sample(seq(1,3, length = 20), 10))
floor(-1.5)
Sys.time()
q()
help(partial)
??partial
help(partial)
q()
q()
writeLines
q()
help(eval)
subset2 <- function(x, condition) {
condition_call <- substitute(condition)
r <- eval(condition_call, x, parent.frame())
x[r, ]
}
scramble <- function(x) x[sample(nrow(x)), ]
subscramble <- function(x, condition) {
scramble(subset2(x, condition))
}
sample_df <- data.frame(a = 1:5, b = 5:1, c = c(5, 3, 1, 4, 1))
subscramble(sample_df, a >= 4)
subset2(sample_df, a >= 4)
sample_df
list2env(sample_df)
list2env(sample_df) -> env1
env1
ls(env1)
q()
z <- quote(y <- x * 10)
str(z)
mode(z)
z
is.character(z)
library(pryr)
otype(z)
typeof(z)
q()
library(xlsx)
help(coin)
library(coin)
help(coin)
install.packages(c("coin", "doParallel", "evaluate", "foreach", "formatR", "highr", "irlba", "iterators", "maps", "maptools", "ndtv", "network", "networkD3", "networkDynamic", "packrat", "rgdal", "rgeos", "rmarkdown", "roxygen2", "sandwich", "sp", "statnet.common", "stringi", "xtable"))
install.packages("mgcv", lib="D:/Program Files/R/R-3.2.2/library")
q()
y <- 1:10
attributes(y)
str(attributes)
str(attributes(y))
attr(y, 'my_attribute') <- 'This is a vector'
str(attributes(y))
attributes(y)
attributes(y[1])
x <- factor(c('a', 'b','a', 'b'))
x
class(x)
levels(x)
str(matrix(1:3, ncol = 3))
str(matrix(1:3, nrow  = 3))
typeof(matrix(1:3, nrow  = 3))
x <- data.frame(a = c(1:3), b = (4:6))
class(x)
is.list(x)
is.data.frame(x)
varaa <- list(a = c(1:3), b = c('a', 'b'))
str(varaa)
varbb <- as.data.frame(varaa)
help("as.data.frame")
varaa <- list(a = c(1:3), b = c(1:3))
varaa <- list(a = c(1:3), b = c(1:3), c = c(1:2))
as.data.frame(varaa)
f <- function(x) x^2
body(f)
formals(f)
environment(f)
search()
library(ggplot2)
environment(stat_smooth)
search()
sum
formals(sum)
body(sum)
environment(sum)
q()
library(dplyr)
help("dplyr")
%>%
`%>%`
help(split_chain)
help("match.call")
help(package = 'ggplotw')
help(package = 'ggplot2')
library(pryr)
help(package = 'pryr')
fun_args(ggplot)
library(ggplot2)
fun_args(ggplot)
ggplot2
f(ggplot2)
search()
f('ggplot', 'package:ggplot2')
x < 1
x <- 1
ff <- function(x){ x <- 2, x}
ff <- function(x){ x <- 2; x}
ff(x)
x
help("library")
help("source")
help(in_dir)
q()
library(pryr)
set.seed(1014)
df <- data.frame(replicate(6, sample(c(1:10, -99), 6, rep = TRUE)))
names(df) <- letters[1:6]
df
sapply(df, function(x) {x[which(x[,1] == -99)] <- NA})
sapply(df, function(x) {x[which(x[,1] == -99)] <- NA})
help(which)
sapply(df, function(x) {x[x[,1] == -99] <- NA})
df[,1]
listaa <- list(a = c(1:4))
listaa
listaa[listaa == 2]
print(listaa)
sapply(df, function(x) {print(x)})
help("lapply")
sapply(df, function(x) {x[which(x == -99)] <- NA})
sapply(df, function(x) {x[which(x == -99)] <- NA;x})
power <- function(exponent) {
function(x){
x ^ exponent
}
}
square <- power(2)
cube <- power(3)
as.list(environment(square))
as.list(environment(cube))
environment(square)
environment(cube)
unenclose(square)
unenclose(cube)
body(square)
help("environment")
help(vector)
formulas <- list(mpg ~ disp, mpg ~ I(1/disp), mpg~disp + wt, mpg~I(1/disp)+wt)
help(lm)
lapply(formulas, function(x) lm(x, data = mtcars))
str(formulas)
q()
is.na
is.factor
is.character
help("is.character")
q()
library(installr)
UpdateR
UpdateR()
updateR()
q(
)
paste0('generic', ',', 'default')
t
objaa <- structure(list(), 'test')
objaa <- structure(list(), class ='test')
t(objaa)
objaa <- structure(1:3, class ='test')
t(objaa)
t.test
help(t)
getGenerics()
getClasses()
showMethods()
library(stats4)
help(c)
c = (x = 'data.frame', y = 'data.frame')
varaa = c(x = 'data.frame', y = 'data.frame')
str(varaa)
varaa
otype(c)
library(pryr)
otype(varaa)
q()
library(dplyr)
filter
filter_
q()
install.packages('lme4')
library(lme4)
rversions::r_versions()
q()
q()
library(nycflights13)
library(dplyr)
help(tbl)
flights_db1 <- tbl(nycflights13_sqlite(), 'flights')
help("paste")
help("stop")
library(lme4)
str(sleepstudy)
head(sleepstudy)
fml <- lmer(Reaction~Days + (Days|Subject), sleepstudy)
summary(fml)
fml
help(do.call)
q()
3*50、64
3*50/64
q()
library(ggplot2)
help("ggplot2")
q()
getwd()
setwd('GitHub/along-tract-stats/example/between_group/')
source('between_grp_simplified.R')
str(modlist)
modsub <- modlist$mod;
modsub
size(modsub)
str(modsub)
type(modsub)
typeof(modsub)
nrow(modsub)
modsub[[1]]
summary(modsub[[1]])
help("lapply")
modsub[[1]]->wuhh
wuhh
summary(wuhh)
str(wuhh)
summary
summary.aov()
summary.aov
summary(wuhh)
wuhh$Within
wuhh$ID$effects
wuhh$ID$rank
wuhh$ID$assign
wuhh$ID$qr$qr
wuhh$ID$terms
wuhh$ID$
coefficients()
wuhh$ID$coefficients
summary(wuhh)
wuhh$Within$qr$qraux
wuhh$Within$qr$pivot
wuhh$Within$qr$tol
wuhh$Within$qr$rank
wuhh$Within$assign
hh <- summary(wuhh)
str(hh)
hh$`Error: ID`[['Pr(>F)']]
hh$`Error: ID`[[1]]
hh$`Error: ID`[[1]][[2]]
hh$`Error: ID`[[1]][[4]]
hh$`Error: ID`[[1]][[5]]
hh$`Error: ID`[[1]][[5]][1]
hh[[2]][[1]]
hh[[2]][[1]][[5]]
hh[[2]][[1]][[5]][1:2]
i39 <- sapply(3:9, fivenum)
i39 <- sapply(3:9, seq)
i39
vapply(i39, fivenum, c(Min. = 0, "1st Qu." = 0, Median = 0, ))
vapply(i39, fivenum, c(Min. = 0, "1st Qu." = 0, Median = 0, "3rd Qu." = 0, Max. = 0))
help("fivenum")
source('between_grp_simplified.R')
source('between_grp_simplified.R')
tt
tt
str(tt)
typeof(tt)
is.matrix(tt)
p.adjust(tt[2,:])
tt[2, :]
tt
tt[hemi, :]
nrow(tt)
tt[2, ]
p.adjust(tt[2,])
p.adjust(tt[1,])
p.adjust(tt[3,])
filter(trk_data, Point = 46)
filter(trk_data, Point == 46)
filter(trk_data, Point == 46) -> mydata
boxplot(FA~Hemisphere*Group, data = mydata)
with(mydata, interaction.plot(Hemisphere, Group, FA, type = 'b'))
source('between_grp_simplified.R')
source('between_grp_simplified.R')
tt
tt
boxplot(FA~Hemisphere*Group, data = mydata)
boxplot(FA~Hemisphere*Group, data = mydata)
ls()
source('between_grp_simplified.R')
source('between_grp_simplified.R')
p
tt
filter(trk_data, Position == 59, Group = "SDCP")
filter(trk_data, Position == 59& Group = "SDCP")
filter(trk_data, Position == 59& Group == "SDCP")
filter(trk_data, Position == 59, Group == "SDCP")
str(trk_data)
filter(trk_data, Point == 59, Group == "SDCP")
t.test(FA~Hemisphere, mydata)
filter(trk_data, Point == 59, Group == "SDCP")->mydata
t.test(FA~Hemisphere, mydata)
filter(trk_data, Point == 46, Group == "SDCP")
filter(trk_data, Point == 46, Group == "SDCP")->mydata
t.test(FA~Hemisphere, mydata)
mydata
t.test(FA~Hemisphere, mydata) -> aaa
str9aa
str(aaa)
source('between_grp_simplified.R')
source('between_grp_simplified.R')
tt
source('between_grp_simplified.R')
source('between_grp_simplified.R')
tt
modlist
source('between_grp_simplified.R')
traceback()
group_by(modlist, Group)
source('between_grp_simplified.R')
modlist
modlist$mod
group_by(modlist, Group)
group_by(as.data.frame(modlist), Group)
source('between_grp_simplified.R')
tt
source('between_grp_simplified.R')
tt
source('between_grp_simplified.R')
tt
modlist$mod
str(modlist$mod)
c(modlist$mod)
source('between_grp_simplified.R')
tt
source('between_grp_simplified.R')
tt
source('between_grp_simplified.R')
tt
str(tt)
unlist(tt)
source('between_grp_simplified.R')
source('between_grp_simplified.R')
tt
source('between_grp_simplified.R')
modlist_df
filter(modlist_df, Group  == "SDCP")
filter(modlist_df, Group  == "SDCP")->mydata
p.adjust(mydata$mod)
source('between_grp_simplified.R')
source('between_grp_simplified.R')
adjustPval
q()
