help("exists")
exists("a",envir = e)
q()
e <- new.env()
e$g <- function() 1
environment(g)
environment()
search()
exists(g)
exists("g")
environment("g")
environment("g")
help("environment")
environment(sd)
where("sd")
library(pryr)
where("sd")
sd
parent.frame()
library(pryr)
a < -5
a <-5
where("a")
rebind <- function(name, value, env = parent.frame()) {
if (identical(env, emptyenv())) {
stop("Can't find ", name, call. = FALSE)
} else if (exists(name, envir = env, inherits = FALSE)) {
assign(name, value, envir = env)
} else {
rebind(name, value, parent.env(env))
}
}
rebind("a",10)
a
help(assign)
search()
parent.frame(2)
parent.frame(-3)
parent.frame(-1)
parent.frame(6)
sys.frame(3)
sys.frame(1)
sys.frame(-1)
sys.frame(0)
help("invisible")
q()
help(runif)
myMat <- matrix(runif(50,0,10),nrow=10)
mymat
myMat
myMean <- function(maTrix){
mean(maTrix)
}
myMean(myMat)
library(dplyr)
q()
help("structure")
library(htmlwidgets)
structure(1:5,comment="my attribute")
structure(1:6,dim=2:3)
a <- 1:5
structure(a)
structure(1:6,levels = 3)
attributes(a)
attr(a,comment) <- "my attribute"
attr(a,"comment") <- "my attribute"
attr(a,"comment")
a
sstructure(a)
structure(a)
help(rev)
rev(a)
f1 <- factor(letters)
f1
levels(f1) <- rev(levels(f1))
f1
letters
f2 <- rev(factor(letters))
f2
f3 <- factor(letters,levels=rev(letters))
f3
a <- "abcd"
str(a)
b <- c("a",'b','c',"d")
str(b)
AA <- matrix(c(1:6),nrow=2)
AA
length(AA)
AA <- array(1:12,c(2,3,3))
BB <- array(1:12,c(2,3,2))
length(BB)
AA <- matrix(c(1:6),nrow=2)
BB
names(AA)
names(BB)
AA <- matrix(1:6,nrow = 2)
AA
BB <- matrix(2:7,nrow = 2)
BB
c(AA,BB)
cbind(AA,BB)
dim(AA)
CC <- array(1:6,dim=c(2,3))
dim(CC)
CC
DD <- c(1:6)
DD
dim(DD)
EE <- as.array(DD)
dim(EE)
is.matrix(AA)
is.array(AA)
is.array(CC)
is.matrix(CC)
is.matrix
hlep(legend)
help(legend)
myData <- data.frame(age=character(0))
nrow(myData)
ncol(myData)
myData <- data.frame()
ncol(myData)
nrow(myData)
typeof(myData)
myData <- data.frame(a=1:2,b=c('a','b'))
is.matrix(mydata)
is.matrix(myData)
as.matrix(myData)
q()
x <- 10
f1 <- function(x){
function()
{x + 10}
}
f1(1)()
f2 <- function(a,b){a*10}
f2(10,stop("This is an error!"))
help(nnet)
help(mget)
f <- function() 2
is.function(f)
is.primitive(f)
is.primitive(sum)
search()
help("Filter")
f <- function(){
x < 1
x <- 1
y <- 2
c(1,2)
}
f()
f <- function(){
x <- 1
y <- 2
c(x,y)
}
f()
rm(f)
ls()
x <- 2
g <- function(){
y <- 1
c(x,y)
}
g()
rm(x,g)
q()
j <- function(){
if (!exists("a")) {
a <- 1
}else {
a <- a + 1
}
print(a)
}
j()
j()
j()
q()
c <- 10
c(c = c)
c(10)
c
c(a = 10)
f <- function(x){
f <- function(x){
f <- function(x){
x^2
}
f(x) + 1
}
f(x)*2
}
f(10)
q()
help('sapply')
AA <- 1:10
is.list(AA)
str(AA)
lapply(1:0, function(x) x + 1)
lapply(1:10, function(x) x + 1)
add <- function(x){
function(y) x + y
}
adders <- lapply(1:10, add)
adders[[1]](10)
adders
adders[[10]](10)
q()
f <- function(x = {y <- 1:2}, y = 0){x + y}
f
f()
f <- function(x = {y <- 1:2}, y = 0){ y x + y}
f <- function(x = {y <- 1:2}, y = 0){ y;x + y}
f()
f2 <- function(x=z){z <- 100;x}
f2()
library(xlsx)
install.packages('xlsx')
library(xlsx)
install.packages('rJava')
library(xlsx)
q()
library(xlsx)
help(lapply)
library(xlsx)
help("read.xlsx2")
help(lapply)
help("read.xlsx2")
help(lapply)
library(dplyr)
help("summarise")
help("group_by")
help(mean)
help(get)
help("with")
help("summarise")
help(do)
by_cyl <- group_by(mtcars, cyl)
do(by_cyl, head(., 2))
head(by_cyl)
by_cyl
str(by_cyl)
help("write.xlsx")
help("read.table")
help(rev)
help(replicate)
help(sample)
AA <- data.frame(a = c(1:4))
AA
AA[]
b <- AA[]
str(b)
str(AA)
q()
library(xlsx)
help("read.xlsx")
library(dpyr)
library(dplyr)
help("summarise")
help("select")
help(mean)
help("range")
help(formula)
help(lm)
help(vapply)
help("trunc")
ceiling(3.2)
ceiling(sample(seq(1,3, length = 20), 10))
signif(sample(seq(1,3, length = 20), 10))
trunc(sample(seq(1,3, length = 20), 10))
floor(sample(seq(1,3, length = 20), 10))
floor(-1.5)
Sys.time()
q()
help(partial)
??partial
help(partial)
q()
q()
writeLines
q()
help(eval)
subset2 <- function(x, condition) {
condition_call <- substitute(condition)
r <- eval(condition_call, x, parent.frame())
x[r, ]
}
scramble <- function(x) x[sample(nrow(x)), ]
subscramble <- function(x, condition) {
scramble(subset2(x, condition))
}
sample_df <- data.frame(a = 1:5, b = 5:1, c = c(5, 3, 1, 4, 1))
subscramble(sample_df, a >= 4)
subset2(sample_df, a >= 4)
sample_df
list2env(sample_df)
list2env(sample_df) -> env1
env1
ls(env1)
q()
z <- quote(y <- x * 10)
str(z)
mode(z)
z
is.character(z)
library(pryr)
otype(z)
typeof(z)
q()
library(xlsx)
help(coin)
library(coin)
help(coin)
install.packages(c("coin", "doParallel", "evaluate", "foreach", "formatR", "highr", "irlba", "iterators", "maps", "maptools", "ndtv", "network", "networkD3", "networkDynamic", "packrat", "rgdal", "rgeos", "rmarkdown", "roxygen2", "sandwich", "sp", "statnet.common", "stringi", "xtable"))
install.packages("mgcv", lib="D:/Program Files/R/R-3.2.2/library")
q()
y <- 1:10
attributes(y)
str(attributes)
str(attributes(y))
attr(y, 'my_attribute') <- 'This is a vector'
str(attributes(y))
attributes(y)
attributes(y[1])
x <- factor(c('a', 'b','a', 'b'))
x
class(x)
levels(x)
str(matrix(1:3, ncol = 3))
str(matrix(1:3, nrow  = 3))
typeof(matrix(1:3, nrow  = 3))
x <- data.frame(a = c(1:3), b = (4:6))
class(x)
is.list(x)
is.data.frame(x)
varaa <- list(a = c(1:3), b = c('a', 'b'))
str(varaa)
varbb <- as.data.frame(varaa)
help("as.data.frame")
varaa <- list(a = c(1:3), b = c(1:3))
varaa <- list(a = c(1:3), b = c(1:3), c = c(1:2))
as.data.frame(varaa)
f <- function(x) x^2
body(f)
formals(f)
environment(f)
search()
library(ggplot2)
environment(stat_smooth)
search()
sum
formals(sum)
body(sum)
environment(sum)
q()
library(dplyr)
help("dplyr")
%>%
`%>%`
help(split_chain)
help("match.call")
help(package = 'ggplotw')
help(package = 'ggplot2')
library(pryr)
help(package = 'pryr')
fun_args(ggplot)
library(ggplot2)
fun_args(ggplot)
ggplot2
f(ggplot2)
search()
f('ggplot', 'package:ggplot2')
x < 1
x <- 1
ff <- function(x){ x <- 2, x}
ff <- function(x){ x <- 2; x}
ff(x)
x
help("library")
help("source")
help(in_dir)
q()
library(pryr)
set.seed(1014)
df <- data.frame(replicate(6, sample(c(1:10, -99), 6, rep = TRUE)))
names(df) <- letters[1:6]
df
sapply(df, function(x) {x[which(x[,1] == -99)] <- NA})
sapply(df, function(x) {x[which(x[,1] == -99)] <- NA})
help(which)
sapply(df, function(x) {x[x[,1] == -99] <- NA})
df[,1]
listaa <- list(a = c(1:4))
listaa
listaa[listaa == 2]
print(listaa)
sapply(df, function(x) {print(x)})
help("lapply")
sapply(df, function(x) {x[which(x == -99)] <- NA})
sapply(df, function(x) {x[which(x == -99)] <- NA;x})
power <- function(exponent) {
function(x){
x ^ exponent
}
}
square <- power(2)
cube <- power(3)
as.list(environment(square))
as.list(environment(cube))
environment(square)
environment(cube)
unenclose(square)
unenclose(cube)
body(square)
help("environment")
help(vector)
formulas <- list(mpg ~ disp, mpg ~ I(1/disp), mpg~disp + wt, mpg~I(1/disp)+wt)
help(lm)
lapply(formulas, function(x) lm(x, data = mtcars))
str(formulas)
q()
is.na
is.factor
is.character
help("is.character")
q()
library(installr)
UpdateR
UpdateR()
updateR()
q(
)
paste0('generic', ',', 'default')
t
objaa <- structure(list(), 'test')
objaa <- structure(list(), class ='test')
t(objaa)
objaa <- structure(1:3, class ='test')
t(objaa)
t.test
help(t)
getGenerics()
getClasses()
showMethods()
library(stats4)
help(c)
c = (x = 'data.frame', y = 'data.frame')
varaa = c(x = 'data.frame', y = 'data.frame')
str(varaa)
varaa
otype(c)
library(pryr)
otype(varaa)
q()
setwd('G:')
set('Matlab/track_reg/CSTanalysis/AAAmatfiles/CST_R/segment/resample/')
setwd('Matlab/track_reg/CSTanalysis/AAAmatfiles/CST_R/segment/resample/')
dir()
source('along_FA_multi.R')
str(melt_data)
head(melt_data)
dcast(melt_data, variable~V1)
help(dplyr)
array(melt_data, V1, variable)
names(melt_data)
arrange(melt_data, V1, variable)
source('along_FA_multi.R')
str(arr_melt_data)
arr_melt_data$Position <- levels(1:50)
str(arr_melt_data)
arr_melt_data
help(rep)
rep(1:3, 2)
source('along_FA_multi.R')
str(arr_melt_data)
source('along_FA_multi.R')
source('along_FA_multi.R')
source('along_FA_multi.R')
source('along_FA_multi.R')
source('along_FA_multi.R')
source('along_FA_multi.R')
source('along_FA_multi.R')
source('along_FA_multi.R')
source('along_FA_multi.R')
setwd('E:')
setwd('dsf/Documents/')
setwd('GitHub/along-tract-stats/example/between_group/')
source('between_grp_simplified.R')
setwd('G:')
getwd()
source('along_FA_multi.R')
cd ..
setwd('../')
dir()
setwd('..')
dir()
setwd('../../')
dir()
setwd('AAAmatfiles/zhengwenting_test/resample/')
source('along_FA.R')
str(org_data)
str(org_data)
source('along_FA.R')
setwd('E:')
getwd()
setwd('../')
dir()
source('single_sub.R')
source('single_sub.R')
q()
